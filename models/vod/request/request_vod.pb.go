// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: vod/request/request_vod.proto

package request

import (
	business "github.com/TTvcloud/vcloud-sdk-golang/models/vod/business"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VodGetPlayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid        string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`               // 视频ID
	Format     string `protobuf:"bytes,2,opt,name=Format,proto3" json:"Format,omitempty"`         //封装格式，支持mp4,dash,hls，默认mp4 Format
	Codec      string `protobuf:"bytes,3,opt,name=Codec,proto3" json:"Codec,omitempty"`           //编码类型，默认h264，可选值为h264,h265等 Codec
	Definition string `protobuf:"bytes,4,opt,name=Definition,proto3" json:"Definition,omitempty"` //视频流清晰度，默认返回全部，支持：240p，360p，480p，540p，720p，1080p
	FileType   string `protobuf:"bytes,5,opt,name=FileType,proto3" json:"FileType,omitempty"`     //流文件类型，默认video，支持：加密视频流evideo，加密音频流传eaudio，非加密视频流video，普通音频音频流audio
	LogoType   string `protobuf:"bytes,6,opt,name=LogoType,proto3" json:"LogoType,omitempty"`     // 水印贴片标签
	Base64     string `protobuf:"bytes,7,opt,name=Base64,proto3" json:"Base64,omitempty"`         //播放地址是否base64编码，默认否，支持设置： 0-否，1-是
	Ssl        string `protobuf:"bytes,8,opt,name=Ssl,proto3" json:"Ssl,omitempty"`               //返回https播放地址，默认否, 1-是；0-否
}

func (x *VodGetPlayInfoRequest) Reset() {
	*x = VodGetPlayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_request_request_vod_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetPlayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetPlayInfoRequest) ProtoMessage() {}

func (x *VodGetPlayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vod_request_request_vod_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetPlayInfoRequest.ProtoReflect.Descriptor instead.
func (*VodGetPlayInfoRequest) Descriptor() ([]byte, []int) {
	return file_vod_request_request_vod_proto_rawDescGZIP(), []int{0}
}

func (x *VodGetPlayInfoRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetLogoType() string {
	if x != nil {
		return x.LogoType
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetSsl() string {
	if x != nil {
		return x.Ssl
	}
	return ""
}

type VodGetOriginalPlayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid    string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`       //视频ID
	Base64 string `protobuf:"bytes,2,opt,name=Base64,proto3" json:"Base64,omitempty"` //播放地址是否base64编码,默认否，0-否，1-是
	Ssl    string `protobuf:"bytes,3,opt,name=Ssl,proto3" json:"Ssl,omitempty"`       //返回https播放地址,默认否, 0-否，1-是
}

func (x *VodGetOriginalPlayInfoRequest) Reset() {
	*x = VodGetOriginalPlayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_request_request_vod_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetOriginalPlayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetOriginalPlayInfoRequest) ProtoMessage() {}

func (x *VodGetOriginalPlayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vod_request_request_vod_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetOriginalPlayInfoRequest.ProtoReflect.Descriptor instead.
func (*VodGetOriginalPlayInfoRequest) Descriptor() ([]byte, []int) {
	return file_vod_request_request_vod_proto_rawDescGZIP(), []int{1}
}

func (x *VodGetOriginalPlayInfoRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetOriginalPlayInfoRequest) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

func (x *VodGetOriginalPlayInfoRequest) GetSsl() string {
	if x != nil {
		return x.Ssl
	}
	return ""
}

type VodUploadVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName    string `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`
	FilePath     string `protobuf:"bytes,2,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	CallbackArgs string `protobuf:"bytes,3,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"`
	Functions    string `protobuf:"bytes,4,opt,name=Functions,proto3" json:"Functions,omitempty"`
}

func (x *VodUploadVideoRequest) Reset() {
	*x = VodUploadVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_request_request_vod_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodUploadVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodUploadVideoRequest) ProtoMessage() {}

func (x *VodUploadVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vod_request_request_vod_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodUploadVideoRequest.ProtoReflect.Descriptor instead.
func (*VodUploadVideoRequest) Descriptor() ([]byte, []int) {
	return file_vod_request_request_vod_proto_rawDescGZIP(), []int{2}
}

func (x *VodUploadVideoRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodUploadVideoRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *VodUploadVideoRequest) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

func (x *VodUploadVideoRequest) GetFunctions() string {
	if x != nil {
		return x.Functions
	}
	return ""
}

type GetRecommendedPostersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vids string `protobuf:"bytes,1,opt,name=Vids,proto3" json:"Vids,omitempty"` //视频ID列表
}

func (x *GetRecommendedPostersRequest) Reset() {
	*x = GetRecommendedPostersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_request_request_vod_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendedPostersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendedPostersRequest) ProtoMessage() {}

func (x *GetRecommendedPostersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vod_request_request_vod_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendedPostersRequest.ProtoReflect.Descriptor instead.
func (*GetRecommendedPostersRequest) Descriptor() ([]byte, []int) {
	return file_vod_request_request_vod_proto_rawDescGZIP(), []int{3}
}

func (x *GetRecommendedPostersRequest) GetVids() string {
	if x != nil {
		return x.Vids
	}
	return ""
}

type UpdateVideoPublishStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid    string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`       //视频ID
	Status string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"` //视频发布状态
}

func (x *UpdateVideoPublishStatusRequest) Reset() {
	*x = UpdateVideoPublishStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_request_request_vod_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVideoPublishStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVideoPublishStatusRequest) ProtoMessage() {}

func (x *UpdateVideoPublishStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vod_request_request_vod_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVideoPublishStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateVideoPublishStatusRequest) Descriptor() ([]byte, []int) {
	return file_vod_request_request_vod_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateVideoPublishStatusRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *UpdateVideoPublishStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UpdateVideoInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid         string                `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                 //视频ID
	PosterUri   *wrappers.StringValue `protobuf:"bytes,2,opt,name=PosterUri,proto3" json:"PosterUri,omitempty"`     //视频封面Uri
	Title       *wrappers.StringValue `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`             //视频名称
	Description *wrappers.StringValue `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"` //视频描述
	Tags        *wrappers.StringValue `protobuf:"bytes,5,opt,name=Tags,proto3" json:"Tags,omitempty"`               //视频标签
}

func (x *UpdateVideoInfoRequest) Reset() {
	*x = UpdateVideoInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_request_request_vod_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVideoInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVideoInfoRequest) ProtoMessage() {}

func (x *UpdateVideoInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vod_request_request_vod_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVideoInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateVideoInfoRequest) Descriptor() ([]byte, []int) {
	return file_vod_request_request_vod_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateVideoInfoRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *UpdateVideoInfoRequest) GetPosterUri() *wrappers.StringValue {
	if x != nil {
		return x.PosterUri
	}
	return nil
}

func (x *UpdateVideoInfoRequest) GetTitle() *wrappers.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *UpdateVideoInfoRequest) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateVideoInfoRequest) GetTags() *wrappers.StringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetVideoInfosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vids string `protobuf:"bytes,1,opt,name=Vids,proto3" json:"Vids,omitempty"` //视频ID列表
}

func (x *GetVideoInfosRequest) Reset() {
	*x = GetVideoInfosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_request_request_vod_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoInfosRequest) ProtoMessage() {}

func (x *GetVideoInfosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vod_request_request_vod_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoInfosRequest.ProtoReflect.Descriptor instead.
func (*GetVideoInfosRequest) Descriptor() ([]byte, []int) {
	return file_vod_request_request_vod_proto_rawDescGZIP(), []int{6}
}

func (x *GetVideoInfosRequest) GetVids() string {
	if x != nil {
		return x.Vids
	}
	return ""
}

type VodStartWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid          string                   `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                   // 视频Id
	TemplateId   string                   `protobuf:"bytes,2,opt,name=TemplateId,proto3" json:"TemplateId,omitempty"`     // 工作流模板Id
	Input        *business.WorkflowParams `protobuf:"bytes,3,opt,name=Input,proto3" json:"Input,omitempty"`               // 动态参数
	Priority     int32                    `protobuf:"varint,4,opt,name=Priority,proto3" json:"Priority,omitempty"`        // 任务优先级
	CallbackArgs string                   `protobuf:"bytes,5,opt,name=CallbackArgs,proto3" json:"CallbackArgs,omitempty"` // 回调参数
}

func (x *VodStartWorkflowRequest) Reset() {
	*x = VodStartWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_request_request_vod_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodStartWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodStartWorkflowRequest) ProtoMessage() {}

func (x *VodStartWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vod_request_request_vod_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodStartWorkflowRequest.ProtoReflect.Descriptor instead.
func (*VodStartWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_vod_request_request_vod_proto_rawDescGZIP(), []int{7}
}

func (x *VodStartWorkflowRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodStartWorkflowRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *VodStartWorkflowRequest) GetInput() *business.WorkflowParams {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *VodStartWorkflowRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *VodStartWorkflowRequest) GetCallbackArgs() string {
	if x != nil {
		return x.CallbackArgs
	}
	return ""
}

var File_vod_request_request_vod_proto protoreflect.FileDescriptor

var file_vod_request_request_vod_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x76, 0x6f, 0x64, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56,
	0x6f, 0x64, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x6f, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x15, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x67,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x10, 0x0a,
	0x03, 0x53, 0x73, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x73, 0x6c, 0x22,
	0x5b, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x73,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x73, 0x6c, 0x22, 0x93, 0x01, 0x0a,
	0x15, 0x56, 0x6f, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x32, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x56, 0x69, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64,
	0x12, 0x3a, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x32, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x69, 0x64, 0x73, 0x22, 0xc4,
	0x01, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x05,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x56, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x41, 0x72, 0x67, 0x73, 0x42, 0xaa, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x6f, 0x64, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0a, 0x56, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x01, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x54, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x6f, 0x64, 0x2f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xa0, 0x01, 0x01, 0xd8, 0x01, 0x01, 0xca, 0x02, 0x19, 0x56, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x56, 0x6f, 0x64, 0x5c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xe2, 0x02, 0x19, 0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vod_request_request_vod_proto_rawDescOnce sync.Once
	file_vod_request_request_vod_proto_rawDescData = file_vod_request_request_vod_proto_rawDesc
)

func file_vod_request_request_vod_proto_rawDescGZIP() []byte {
	file_vod_request_request_vod_proto_rawDescOnce.Do(func() {
		file_vod_request_request_vod_proto_rawDescData = protoimpl.X.CompressGZIP(file_vod_request_request_vod_proto_rawDescData)
	})
	return file_vod_request_request_vod_proto_rawDescData
}

var file_vod_request_request_vod_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_vod_request_request_vod_proto_goTypes = []interface{}{
	(*VodGetPlayInfoRequest)(nil),           // 0: Vcloud.Models.Vod.VodGetPlayInfoRequest
	(*VodGetOriginalPlayInfoRequest)(nil),   // 1: Vcloud.Models.Vod.VodGetOriginalPlayInfoRequest
	(*VodUploadVideoRequest)(nil),           // 2: Vcloud.Models.Vod.VodUploadVideoRequest
	(*GetRecommendedPostersRequest)(nil),    // 3: Vcloud.Models.Vod.GetRecommendedPostersRequest
	(*UpdateVideoPublishStatusRequest)(nil), // 4: Vcloud.Models.Vod.UpdateVideoPublishStatusRequest
	(*UpdateVideoInfoRequest)(nil),          // 5: Vcloud.Models.Vod.UpdateVideoInfoRequest
	(*GetVideoInfosRequest)(nil),            // 6: Vcloud.Models.Vod.GetVideoInfosRequest
	(*VodStartWorkflowRequest)(nil),         // 7: Vcloud.Models.Vod.VodStartWorkflowRequest
	(*wrappers.StringValue)(nil),            // 8: google.protobuf.StringValue
	(*business.WorkflowParams)(nil),         // 9: Vcloud.Models.Vod.WorkflowParams
}
var file_vod_request_request_vod_proto_depIdxs = []int32{
	8, // 0: Vcloud.Models.Vod.UpdateVideoInfoRequest.PosterUri:type_name -> google.protobuf.StringValue
	8, // 1: Vcloud.Models.Vod.UpdateVideoInfoRequest.Title:type_name -> google.protobuf.StringValue
	8, // 2: Vcloud.Models.Vod.UpdateVideoInfoRequest.Description:type_name -> google.protobuf.StringValue
	8, // 3: Vcloud.Models.Vod.UpdateVideoInfoRequest.Tags:type_name -> google.protobuf.StringValue
	9, // 4: Vcloud.Models.Vod.VodStartWorkflowRequest.Input:type_name -> Vcloud.Models.Vod.WorkflowParams
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_vod_request_request_vod_proto_init() }
func file_vod_request_request_vod_proto_init() {
	if File_vod_request_request_vod_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vod_request_request_vod_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetPlayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_request_request_vod_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetOriginalPlayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_request_request_vod_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodUploadVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_request_request_vod_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendedPostersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_request_request_vod_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVideoPublishStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_request_request_vod_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVideoInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_request_request_vod_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVideoInfosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_request_request_vod_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodStartWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vod_request_request_vod_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vod_request_request_vod_proto_goTypes,
		DependencyIndexes: file_vod_request_request_vod_proto_depIdxs,
		MessageInfos:      file_vod_request_request_vod_proto_msgTypes,
	}.Build()
	File_vod_request_request_vod_proto = out.File
	file_vod_request_request_vod_proto_rawDesc = nil
	file_vod_request_request_vod_proto_goTypes = nil
	file_vod_request_request_vod_proto_depIdxs = nil
}
