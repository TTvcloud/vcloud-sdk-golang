// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: vod/business/vod_media.proto

package business

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AudioStreamMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codec      string  `protobuf:"bytes,1,opt,name=Codec,proto3" json:"Codec,omitempty"`            //音频编码格式
	Duration   float32 `protobuf:"fixed32,2,opt,name=Duration,proto3" json:"Duration,omitempty"`    //音频时长
	SampleRate int64   `protobuf:"varint,3,opt,name=SampleRate,proto3" json:"SampleRate,omitempty"` //音频采样率
	Bitrate    int64   `protobuf:"varint,4,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`       //音频码率(Kbps)
}

func (x *AudioStreamMeta) Reset() {
	*x = AudioStreamMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioStreamMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioStreamMeta) ProtoMessage() {}

func (x *AudioStreamMeta) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioStreamMeta.ProtoReflect.Descriptor instead.
func (*AudioStreamMeta) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{0}
}

func (x *AudioStreamMeta) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *AudioStreamMeta) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AudioStreamMeta) GetSampleRate() int64 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AudioStreamMeta) GetBitrate() int64 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

type VideoStreamMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codec      string  `protobuf:"bytes,1,opt,name=Codec,proto3" json:"Codec,omitempty"`           //视频编码格式
	Height     int64   `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`        //视频高度
	Width      int64   `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`          //视频宽度
	Duration   float32 `protobuf:"fixed32,4,opt,name=Duration,proto3" json:"Duration,omitempty"`   //视频时长
	Definition string  `protobuf:"bytes,5,opt,name=Definition,proto3" json:"Definition,omitempty"` //视频清晰度
	Bitrate    int64   `protobuf:"varint,6,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`      //视频码率(Kbps)
	Fps        float32 `protobuf:"fixed32,7,opt,name=Fps,proto3" json:"Fps,omitempty"`             //帧率
}

func (x *VideoStreamMeta) Reset() {
	*x = VideoStreamMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoStreamMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoStreamMeta) ProtoMessage() {}

func (x *VideoStreamMeta) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoStreamMeta.ProtoReflect.Descriptor instead.
func (*VideoStreamMeta) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{1}
}

func (x *VideoStreamMeta) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VideoStreamMeta) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoStreamMeta) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoStreamMeta) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoStreamMeta) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *VideoStreamMeta) GetBitrate() int64 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VideoStreamMeta) GetFps() float32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

type TranscodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId          string           `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`                    //文件ID
	Md5             string           `protobuf:"bytes,2,opt,name=Md5,proto3" json:"Md5,omitempty"`                          // hash值
	FileType        string           `protobuf:"bytes,3,opt,name=FileType,proto3" json:"FileType,omitempty"`                //文件类型 video/audio
	LogoType        string           `protobuf:"bytes,4,opt,name=LogoType,proto3" json:"LogoType,omitempty"`                // logo类型
	Encrypt         bool             `protobuf:"varint,5,opt,name=Encrypt,proto3" json:"Encrypt,omitempty"`                 //是否加密
	Format          string           `protobuf:"bytes,6,opt,name=Format,proto3" json:"Format,omitempty"`                    //文件格式
	Duration        float32          `protobuf:"fixed32,7,opt,name=Duration,proto3" json:"Duration,omitempty"`              //时长
	Size            int64            `protobuf:"varint,8,opt,name=Size,proto3" json:"Size,omitempty"`                       //文件大小
	StoreUri        string           `protobuf:"bytes,9,opt,name=StoreUri,proto3" json:"StoreUri,omitempty"`                //对象地址
	VideoStreamMeta *VideoStreamMeta `protobuf:"bytes,10,opt,name=VideoStreamMeta,proto3" json:"VideoStreamMeta,omitempty"` //视频流信息
	AudioStreamMeta *AudioStreamMeta `protobuf:"bytes,11,opt,name=AudioStreamMeta,proto3" json:"AudioStreamMeta,omitempty"` //音频流信息
	CreateTime      string           `protobuf:"bytes,12,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`           //创建时间
}

func (x *TranscodeInfo) Reset() {
	*x = TranscodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeInfo) ProtoMessage() {}

func (x *TranscodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeInfo.ProtoReflect.Descriptor instead.
func (*TranscodeInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{2}
}

func (x *TranscodeInfo) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *TranscodeInfo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *TranscodeInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *TranscodeInfo) GetLogoType() string {
	if x != nil {
		return x.LogoType
	}
	return ""
}

func (x *TranscodeInfo) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

func (x *TranscodeInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *TranscodeInfo) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TranscodeInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TranscodeInfo) GetStoreUri() string {
	if x != nil {
		return x.StoreUri
	}
	return ""
}

func (x *TranscodeInfo) GetVideoStreamMeta() *VideoStreamMeta {
	if x != nil {
		return x.VideoStreamMeta
	}
	return nil
}

func (x *TranscodeInfo) GetAudioStreamMeta() *AudioStreamMeta {
	if x != nil {
		return x.AudioStreamMeta
	}
	return nil
}

func (x *TranscodeInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type MediaBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName     string   `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`         //空间名
	Vid           string   `protobuf:"bytes,2,opt,name=Vid,proto3" json:"Vid,omitempty"`                     //视频ID
	Title         string   `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`                 //视频名称
	Description   string   `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`     //视频描述
	PosterUri     string   `protobuf:"bytes,5,opt,name=PosterUri,proto3" json:"PosterUri,omitempty"`         //封面图对象地址
	PublishStatus string   `protobuf:"bytes,6,opt,name=PublishStatus,proto3" json:"PublishStatus,omitempty"` //发布状态
	AuditStatus   int64    `protobuf:"varint,7,opt,name=AuditStatus,proto3" json:"AuditStatus,omitempty"`    //审核状态
	Tags          []string `protobuf:"bytes,8,rep,name=Tags,proto3" json:"Tags,omitempty"`                   //标签列表
	CreateTime    string   `protobuf:"bytes,9,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`       //创建时间
}

func (x *MediaBasicInfo) Reset() {
	*x = MediaBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaBasicInfo) ProtoMessage() {}

func (x *MediaBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaBasicInfo.ProtoReflect.Descriptor instead.
func (*MediaBasicInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{3}
}

func (x *MediaBasicInfo) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *MediaBasicInfo) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *MediaBasicInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MediaBasicInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MediaBasicInfo) GetPosterUri() string {
	if x != nil {
		return x.PosterUri
	}
	return ""
}

func (x *MediaBasicInfo) GetPublishStatus() string {
	if x != nil {
		return x.PublishStatus
	}
	return ""
}

func (x *MediaBasicInfo) GetAuditStatus() int64 {
	if x != nil {
		return x.AuditStatus
	}
	return 0
}

func (x *MediaBasicInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MediaBasicInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type VideoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo      *MediaBasicInfo  `protobuf:"bytes,1,opt,name=BasicInfo,proto3" json:"BasicInfo,omitempty"`           //视频基础信息
	SourceInfo     *VodSourceInfo   `protobuf:"bytes,2,opt,name=SourceInfo,proto3" json:"SourceInfo,omitempty"`         //原视频信息
	TranscodeInfos []*TranscodeInfo `protobuf:"bytes,3,rep,name=TranscodeInfos,proto3" json:"TranscodeInfos,omitempty"` //转码视频信息列表
}

func (x *VideoInfo) Reset() {
	*x = VideoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoInfo) ProtoMessage() {}

func (x *VideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoInfo.ProtoReflect.Descriptor instead.
func (*VideoInfo) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{4}
}

func (x *VideoInfo) GetBasicInfo() *MediaBasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *VideoInfo) GetSourceInfo() *VodSourceInfo {
	if x != nil {
		return x.SourceInfo
	}
	return nil
}

func (x *VideoInfo) GetTranscodeInfos() []*TranscodeInfo {
	if x != nil {
		return x.TranscodeInfos
	}
	return nil
}

type GetVideoInfosData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoInfoList []*VideoInfo `protobuf:"bytes,1,rep,name=VideoInfoList,proto3" json:"VideoInfoList,omitempty"` //视频信息列表
	NotExistVids  []string     `protobuf:"bytes,2,rep,name=NotExistVids,proto3" json:"NotExistVids,omitempty"`   //不存在的视频VID列表
}

func (x *GetVideoInfosData) Reset() {
	*x = GetVideoInfosData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoInfosData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoInfosData) ProtoMessage() {}

func (x *GetVideoInfosData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoInfosData.ProtoReflect.Descriptor instead.
func (*GetVideoInfosData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{5}
}

func (x *GetVideoInfosData) GetVideoInfoList() []*VideoInfo {
	if x != nil {
		return x.VideoInfoList
	}
	return nil
}

func (x *GetVideoInfosData) GetNotExistVids() []string {
	if x != nil {
		return x.NotExistVids
	}
	return nil
}

type StoreUriGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid       string   `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`             //视频ID
	StoreUris []string `protobuf:"bytes,2,rep,name=StoreUris,proto3" json:"StoreUris,omitempty"` //封面图对象地址列表
}

func (x *StoreUriGroup) Reset() {
	*x = StoreUriGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreUriGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreUriGroup) ProtoMessage() {}

func (x *StoreUriGroup) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreUriGroup.ProtoReflect.Descriptor instead.
func (*StoreUriGroup) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{6}
}

func (x *StoreUriGroup) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *StoreUriGroup) GetStoreUris() []string {
	if x != nil {
		return x.StoreUris
	}
	return nil
}

type GetRecPostersData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreUriGroups []*StoreUriGroup `protobuf:"bytes,1,rep,name=StoreUriGroups,proto3" json:"StoreUriGroups,omitempty"` //封面图信息
	NotExistVids   []string         `protobuf:"bytes,2,rep,name=NotExistVids,proto3" json:"NotExistVids,omitempty"`     //不存在的视频VID列表
}

func (x *GetRecPostersData) Reset() {
	*x = GetRecPostersData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_business_vod_media_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecPostersData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecPostersData) ProtoMessage() {}

func (x *GetRecPostersData) ProtoReflect() protoreflect.Message {
	mi := &file_vod_business_vod_media_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecPostersData.ProtoReflect.Descriptor instead.
func (*GetRecPostersData) Descriptor() ([]byte, []int) {
	return file_vod_business_vod_media_proto_rawDescGZIP(), []int{7}
}

func (x *GetRecPostersData) GetStoreUriGroups() []*StoreUriGroup {
	if x != nil {
		return x.StoreUriGroups
	}
	return nil
}

func (x *GetRecPostersData) GetNotExistVids() []string {
	if x != nil {
		return x.NotExistVids
	}
	return nil
}

var File_vod_business_vod_media_proto protoreflect.FileDescriptor

var file_vod_business_vod_media_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x6f, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f,
	0x64, 0x1a, 0x1d, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f,
	0x76, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x7d, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22,
	0xbd, 0x01, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x46, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x46, 0x70, 0x73, 0x22,
	0xab, 0x03, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x64, 0x35,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72,
	0x69, 0x12, 0x4c, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x56, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0f,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x4c, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x56, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0f, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x92, 0x02,
	0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3f, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x40, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x56, 0x6f, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x56, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x7b, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x42, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x56, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x56, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x0d, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x56,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x48, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x56, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x55, 0x72, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x73, 0x42,
	0xae, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x6f, 0x64, 0x2e, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x08, 0x56, 0x6f, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x54, 0x54, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0xa0, 0x01,
	0x01, 0xd8, 0x01, 0x01, 0xc2, 0x02, 0x00, 0xca, 0x02, 0x1a, 0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x56, 0x6f, 0x64, 0x5c, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0xe2, 0x02, 0x19, 0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vod_business_vod_media_proto_rawDescOnce sync.Once
	file_vod_business_vod_media_proto_rawDescData = file_vod_business_vod_media_proto_rawDesc
)

func file_vod_business_vod_media_proto_rawDescGZIP() []byte {
	file_vod_business_vod_media_proto_rawDescOnce.Do(func() {
		file_vod_business_vod_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_vod_business_vod_media_proto_rawDescData)
	})
	return file_vod_business_vod_media_proto_rawDescData
}

var file_vod_business_vod_media_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_vod_business_vod_media_proto_goTypes = []interface{}{
	(*AudioStreamMeta)(nil),   // 0: Vcloud.Models.Vod.AudioStreamMeta
	(*VideoStreamMeta)(nil),   // 1: Vcloud.Models.Vod.VideoStreamMeta
	(*TranscodeInfo)(nil),     // 2: Vcloud.Models.Vod.TranscodeInfo
	(*MediaBasicInfo)(nil),    // 3: Vcloud.Models.Vod.MediaBasicInfo
	(*VideoInfo)(nil),         // 4: Vcloud.Models.Vod.VideoInfo
	(*GetVideoInfosData)(nil), // 5: Vcloud.Models.Vod.GetVideoInfosData
	(*StoreUriGroup)(nil),     // 6: Vcloud.Models.Vod.StoreUriGroup
	(*GetRecPostersData)(nil), // 7: Vcloud.Models.Vod.GetRecPostersData
	(*VodSourceInfo)(nil),     // 8: Vcloud.Models.Vod.VodSourceInfo
}
var file_vod_business_vod_media_proto_depIdxs = []int32{
	1, // 0: Vcloud.Models.Vod.TranscodeInfo.VideoStreamMeta:type_name -> Vcloud.Models.Vod.VideoStreamMeta
	0, // 1: Vcloud.Models.Vod.TranscodeInfo.AudioStreamMeta:type_name -> Vcloud.Models.Vod.AudioStreamMeta
	3, // 2: Vcloud.Models.Vod.VideoInfo.BasicInfo:type_name -> Vcloud.Models.Vod.MediaBasicInfo
	8, // 3: Vcloud.Models.Vod.VideoInfo.SourceInfo:type_name -> Vcloud.Models.Vod.VodSourceInfo
	2, // 4: Vcloud.Models.Vod.VideoInfo.TranscodeInfos:type_name -> Vcloud.Models.Vod.TranscodeInfo
	4, // 5: Vcloud.Models.Vod.GetVideoInfosData.VideoInfoList:type_name -> Vcloud.Models.Vod.VideoInfo
	6, // 6: Vcloud.Models.Vod.GetRecPostersData.StoreUriGroups:type_name -> Vcloud.Models.Vod.StoreUriGroup
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_vod_business_vod_media_proto_init() }
func file_vod_business_vod_media_proto_init() {
	if File_vod_business_vod_media_proto != nil {
		return
	}
	file_vod_business_vod_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vod_business_vod_media_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioStreamMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoStreamMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVideoInfosData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreUriGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_business_vod_media_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecPostersData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vod_business_vod_media_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vod_business_vod_media_proto_goTypes,
		DependencyIndexes: file_vod_business_vod_media_proto_depIdxs,
		MessageInfos:      file_vod_business_vod_media_proto_msgTypes,
	}.Build()
	File_vod_business_vod_media_proto = out.File
	file_vod_business_vod_media_proto_rawDesc = nil
	file_vod_business_vod_media_proto_goTypes = nil
	file_vod_business_vod_media_proto_depIdxs = nil
}
